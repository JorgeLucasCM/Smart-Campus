/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <FaceRecognitionImplFactory.hpp>
#include "FaceRecognitionImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_face_recognition_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoFaceRecognitionImpl"

namespace kurento
{
namespace module
{
namespace facerecognition
{

FaceRecognitionImpl::FaceRecognitionImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline) )

{
}

MediaObjectImpl *
FaceRecognitionImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new FaceRecognitionImpl (config, mediaPipeline);
}

FaceRecognitionImpl::StaticConstructor FaceRecognitionImpl::staticConstructor;

FaceRecognitionImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

void FaceRecognitionImpl::setConfig(const std::string &path, const int opFilter, const std::string &newPerson)
{
    FaceRecognitionOpenCVImpl::setConfig(path, opFilter, newPerson);
}

} /* facerecognition */
} /* module */
} /* kurento */
