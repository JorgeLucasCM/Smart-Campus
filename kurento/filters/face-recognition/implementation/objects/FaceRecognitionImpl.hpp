/* Autogenerated with kurento-module-creator */

#ifndef __FACE_RECOGNITION_IMPL_HPP__
#define __FACE_RECOGNITION_IMPL_HPP__

#include "OpenCVFilterImpl.hpp"
#include "FaceRecognition.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>
#include "FaceRecognitionOpenCVImpl.hpp"

namespace kurento
{
namespace module
{
namespace facerecognition
{
class FaceRecognitionImpl;
} /* facerecognition */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::facerecognition::FaceRecognitionImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace facerecognition
{

class FaceRecognitionImpl : public OpenCVFilterImpl, public virtual FaceRecognition, public virtual FaceRecognitionOpenCVImpl
{

private:
  std::string path;
  int opFilter;
  std::string newPerson;

public:

  FaceRecognitionImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline);

  virtual ~FaceRecognitionImpl() = default;

  virtual std::shared_ptr<MediaObject> getSharedFromThis() { return shared_from_this(); }

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);

  virtual void setConfig(const std::string &path, const int opFilter, const std::string &newPerson);

private:

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* facerecognition */
} /* module */
} /* kurento */

#endif /*  __FACE_RECOGNITION_IMPL_HPP__ */
